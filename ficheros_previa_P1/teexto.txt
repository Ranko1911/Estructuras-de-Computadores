


//Sumador completo (full-adder) de tres entradas de 1 bit realizado a partir de puertas lógicas 
module fa(output wire sum, output wire c_out, input wire a, input wire b, input wire c_in);

wire sum1, carry1, sum, carry2;
	
ha_v1 ha_1(sum1, carry1, a ,b);
ha_v1 ha_2(sum, carry2, c_in, sum1);
or and1(c_out, carry2, carry1);

endmodule
//Semisumador de dos entradas de 1 bit realizado a partir de puertas

module ha_v1(output wire sum, output wire carry, input wire a, input wire b);

//Declaración de conexiones internas: no hay ninguna

//Estructura interna: Instancias de puertas y sus conexiones

xor xor1(sum, a, b);
and and1(carry, a, b);

endmodule
`timescale 1 ns / 10 ps 

module fa_v1_tb;

reg c_in, a , b;
wire sum, c_out;

fa_v1 fa_1 (sum, c_out, a, b, c_in);

initial
begin
	$monitor("tiempo=%0d a=%b b=%b c_in=%b suma=%b c_out=%b ", $time, a, b, c_in, sum, c_out);
	$dumpfile("fa_v1_tb.vcd");
  	$dumpvars;

	//vector de test 0
  	a = 1'b0;
  	b = 1'b0;
	c_in = 1'b0;
  	#20;
	
	//vector de test 0
        a = 1'b1;
        b = 1'b0;
        c_in = 1'b0;
        #20;

        //vector de test 0
        a = 1'b0;
        b = 1'b1;
        c_in = 1'b0;
        #20;

        //vector de test 0
        a = 1'b1;
        b = 1'b1;
        c_in = 1'b0;
        #20;

        //vector de test 0
        a = 1'b0;
        b = 1'b0;
        c_in = 1'b1;
        #20;

        //vector de test 0
        a = 1'b1;
        b = 1'b0;
        c_in = 1'b1;
        #20;

        //vector de test 0
        a = 1'b0;
        b = 1'b1;
        c_in = 1'b1;
        #20;

        //vector de test 0
        a = 1'b1;
        b = 1'b1;
        c_in = 1'b1;
        #20;
$finish; 
end
endmodule
